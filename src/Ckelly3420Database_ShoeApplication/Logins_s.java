/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Ckelly3420Database_ShoeApplication;

/**
 *
 * @author chriskelly
 */
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Image;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.sql.*;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import net.proteanit.sql.DbUtils;
import java.math.BigDecimal;
import java.util.Calendar;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.data.general.DefaultPieDataset;
public class Logins_s extends javax.swing.JFrame {
Connection cnn = null;
ResultSet rs = null;
PreparedStatement pst = null;
ResultSet ne = null;
ResultSet view = null;
    /**
     * Creates new form Logins_s
     */
    public Logins_s() {
        initComponents();
        cnn = javaconnect.getConnection();
        Update_table2();
        GBUtil.loadEmployees(Box1);
      //  loadAndSelectComboboxes();
        
    }
 private void Update_table2(){
       try{ 
    //String sql = "@qry2016 ;";
    //pst = cnn.prepareStatement(sql);
    //rs = pst.executeQuery();
    //Table1.setModel(DbUtils.resultSetToTableModel(rs));
    //String sql2 = "select * from clck_employee";
    //pst = cnn.prepareStatement(sql2);
    //rs = pst.executeQuery();
    //EmployeeTable.setModel(DbUtils.resultSetToTableModel(rs));
    //String sql3 = "select * from clck_sale";
    //pst = cnn.prepareStatement(sql3);
   // rs = pst.executeQuery();
   // SalesHistoryTable.setModel(DbUtils.resultSetToTableModel(rs));
       }
       catch(Exception e){
           JOptionPane.showMessageDialog(null,e);
       }
}
 void loadAndSelectComboboxes(){
    // GBUtil.loadShoes(Box1);
    // GBUtil.loadYear(Box1);
 }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        viewBox = new javax.swing.JComboBox<String>();
        Box1 = new javax.swing.JComboBox<String>();
        Submit = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        addNew = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table1 = new javax.swing.JTable();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 391, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(32, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 387, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Marker Felt", 3, 24)); // NOI18N
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Ckelly3420Database_ShoeApplication/logo.png"))); // NOI18N

        jPanel5.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        viewBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Employees", "Shoes", "Sales" }));
        viewBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBoxActionPerformed(evt);
            }
        });

        Box1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Box1ActionPerformed(evt);
            }
        });

        Submit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Ckelly3420Database_ShoeApplication/red-submit-button-hi.png"))); // NOI18N
        Submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubmitActionPerformed(evt);
            }
        });

        jLabel2.setText("View:");

        jLabel3.setText("Sort By/Filter:");

        addNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Ckelly3420Database_ShoeApplication/images.png"))); // NOI18N
        addNew.setToolTipText("Add to selected view field");
        addNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNewActionPerformed(evt);
            }
        });

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Ckelly3420Database_ShoeApplication/Delete.png"))); // NOI18N
        jButton1.setToolTipText("Delete selected data\n");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Ckelly3420Database_ShoeApplication/search.png"))); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Ckelly3420Database_ShoeApplication/new.png"))); // NOI18N
        jButton3.setToolTipText("Create a new Order \n");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Ckelly3420Database_ShoeApplication/5.png"))); // NOI18N
        jButton4.setToolTipText("Print Java PDF report");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Ckelly3420Database_ShoeApplication/963.png"))); // NOI18N
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Hoefler Text", 3, 18)); // NOI18N
        jLabel4.setText("SELECTION MENU");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel5Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(addNew, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(jButton5))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel5Layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(viewBox, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Box1, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(25, 25, 25)))
                .addGap(20, 20, 20))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addComponent(Submit, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(89, 89, 89)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(viewBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Box1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Submit, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton5)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addNew, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        Table1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(Table1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(334, Short.MAX_VALUE)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(334, 334, 334))
            .addGroup(layout.createSequentialGroup()
                .addGap(417, 417, 417)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 469, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        PurchaseOrder_view Info = new PurchaseOrder_view();
        Info.setVisible(true);

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        GBGlobals.input_3 =viewBox.getSelectedItem().toString();
        if(GBGlobals.input_3.equals("Employees")){
            int selectedRow = Table1.getSelectedRow();
            if(selectedRow < 0) {
                JOptionPane.showMessageDialog(this, "Select a Employee first, then remove.","No Employee is selected!",
                    JOptionPane.WARNING_MESSAGE);
                return;
            }
            DefaultTableModel model = (DefaultTableModel) Table1.getModel();
            Object[] values = new Object[3];
            for (int col =0; col<3; col++){
                values[col] = model.getValueAt(selectedRow,col);
            }

            int selValue;
            selValue = JOptionPane.showConfirmDialog(null,
                String.format("Remove Employee <%s, %s>\n",
                    values[0],values[2]),
                "Remove a Student",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE);
            if(selValue == JOptionPane.YES_OPTION){

                Object b = values[0];
                Integer x = ((BigDecimal)b).intValue();
                javaconnect.deleteEmployee(x);
                try{
                    String sql = "Select * from clck_employee";
                    pst = cnn.prepareStatement(sql);
                    rs = pst.executeQuery();
                    Table1.setModel(DbUtils.resultSetToTableModel(rs));
                } catch (Exception e){
                    JOptionPane.showMessageDialog(null,e);
                }

            }

        }
        if(GBGlobals.input_3.equals("Shoes")){
            int selectedRow = Table1.getSelectedRow();
            if(selectedRow < 0) {
                JOptionPane.showMessageDialog(this, "Select a Shoe first, then remove.","No Shoe is selected!",
                    JOptionPane.WARNING_MESSAGE);
                return;
            }
            DefaultTableModel model = (DefaultTableModel) Table1.getModel();
            Object[] values = new Object[3];
            for (int col =0; col<3; col++){
                values[col] = model.getValueAt(selectedRow,col);
            }

            int selValue;
            selValue = JOptionPane.showConfirmDialog(null,
                String.format("Remove Shoes <%s, %s>\n",
                    values[0],values[2]),
                "Remove a Shoe",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE);
            if(selValue == JOptionPane.YES_OPTION){

                Object b = values[0];
                Integer x = ((BigDecimal)b).intValue();
                javaconnect.deleteShoes(x);
                try{
                    String sql = "Select * from clck_shoes";
                    pst = cnn.prepareStatement(sql);
                    rs = pst.executeQuery();
                    Table1.setModel(DbUtils.resultSetToTableModel(rs));
                } catch (Exception e){
                    JOptionPane.showMessageDialog(null,e);
                }

            }
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void addNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewActionPerformed
        // TODO add your handling code here:
        GBGlobals.input_3 =viewBox.getSelectedItem().toString();
        if(GBGlobals.input_3.equals("Employees")){
            GBGlobals.flag = true;
            String classFields[] = {"EmployeeID", "Fname", "Mname", "Lname","PhoneNumber", "SSN", "BirthDate", "City", "State", "Zip"};
            populate_EmployeeID();
            String defValues[] = { GBGlobals.result,"","","","","","","","",""};
            RemoteLoad coursePane = new RemoteLoad(this, "Add Following New Employee?",classFields, defValues);
            String Values[] = coursePane.getRecord();
            if(Values == null){
                return;
            }
            boolean suc = javaconnect.addNewEmployee(Values);
        }
        if (GBGlobals.input_3.equals("Shoes")){
            GBGlobals.flag = false;
            //JOptionPane.showMessageDialog(null, "HERE");
            String classFields[] = {"ShoeID","Price","Name","Size","Gender","Model"};
            populate_ShoeID();
            String defValues[] = { GBGlobals.result,"","","","",""};
            RemoteLoad coursePane = new RemoteLoad(this, "Add Following New Shoe?",classFields,defValues);
            String Values[] = coursePane.getRecord2();
            if(Values == null){
                return;
            }
            boolean suc = javaconnect.addNewShoe(Values);
        }

    }//GEN-LAST:event_addNewActionPerformed

    private void SubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubmitActionPerformed
        // TODO add your handling code here:
        GBGlobals.input_1 = viewBox.getSelectedItem().toString();
        GBGlobals.input_2 = Box1.getSelectedItem().toString();
        /*
        if(GBGlobals.input_1 == "Shoes" ){
            GBUtil.loadShoes(Box1);
            try{
                String sql = "SELECT * from clck_shoes";
                pst = cnn.prepareStatement(sql);
                rs = pst.executeQuery();
                Table1.setModel(DbUtils.resultSetToTableModel(rs));
            } catch (Exception e){
                JOptionPane.showMessageDialog(null,e);
            }
        }
        */
        if (GBGlobals.input_1 == "Sales"){
            // GBGlobals.input_1 = viewBox.getSelectedItem().toString();
            GBUtil.loadYear(Box1);
            try{
                String sql = "SELECT e.EmployeeID,e.Fname,s2.*,p.Pdate,c.quantity FROM clck_employee e, clck_purchaseorder p, clck_contains c, clck_sale s, clck_shoes s2 "
                        + "WHERE s2.ShoeID = c.S_id and c.P_id = p.PurchaseOrderID and "
                        + "e.EmployeeID = s.EmployeeID and s.PurchaseorderID = p.PurchaseOrderID and p.Pdate >= TO_DATE('01/01/2015', 'mm/dd/yyyy') "
                        + "and p.Pdate <= TO_DATE('12/31/2017', 'mm/dd/yyyy')";
                pst = cnn.prepareStatement(sql);
                rs = pst.executeQuery();
                Table1.setModel(DbUtils.resultSetToTableModel(rs));
            } catch (Exception e){
                JOptionPane.showMessageDialog(null,e);
            }
        }
        else if (GBGlobals.input_1 == "Employees" && GBGlobals.input_2 == "BirthDate"){
            try{
                String sql = "SELECT * from clck_employee order by BirthDate asc";
                pst = cnn.prepareStatement(sql);
                rs = pst.executeQuery();
                Table1.setModel(DbUtils.resultSetToTableModel(rs));
            } catch (Exception e){
                JOptionPane.showMessageDialog(null,e);
            }
        }
        else if (GBGlobals.input_1.equals("Employees") && GBGlobals.input_2.equals("EmployeeID")){
            try{
                String sql = "SELECT * from clck_employee order by EmployeeID asc";
                pst = cnn.prepareStatement(sql);
                rs = pst.executeQuery();
                Table1.setModel(DbUtils.resultSetToTableModel(rs));
            } catch (Exception e){
                JOptionPane.showMessageDialog(null,e);
            }
        }
        else if (GBGlobals.input_1 == "Shoes" && GBGlobals.input_2.equals("All Shoes")){
            try{
                String sql = "SELECT * from clck_shoes";
                pst = cnn.prepareStatement(sql);
                rs = pst.executeQuery();
                Table1.setModel(DbUtils.resultSetToTableModel(rs));
            } catch (Exception e){
                JOptionPane.showMessageDialog(null,e);
            }
        }
        else if (GBGlobals.input_1.equals("Shoes") && GBGlobals.input_2.equals("Puma")){
            try{
                String sql = "SELECT * from clck_shoes Where name = 'Puma'";
                pst = cnn.prepareStatement(sql);
                rs = pst.executeQuery();
                Table1.setModel(DbUtils.resultSetToTableModel(rs));
            } catch (Exception e){
                JOptionPane.showMessageDialog(null,e);
            }
        }
        else if (GBGlobals.input_1.equals("Shoes") && GBGlobals.input_2.equals("Reebok")){
            try{
                String sql = "SELECT * from clck_shoes Where name = 'Reebok'";
                pst = cnn.prepareStatement(sql);
                rs = pst.executeQuery();
                Table1.setModel(DbUtils.resultSetToTableModel(rs));
            } catch (Exception e){
                JOptionPane.showMessageDialog(null,e);
            }
        }
        else if (GBGlobals.input_1.equals("Shoes") && GBGlobals.input_2.equals("DC")){
            try{
                String sql = "SELECT * from clck_shoes Where name = 'DC'";
                pst = cnn.prepareStatement(sql);
                rs = pst.executeQuery();
                Table1.setModel(DbUtils.resultSetToTableModel(rs));
            } catch (Exception e){
                JOptionPane.showMessageDialog(null,e);
            }
        }
        //JOptionPane.showMessageDialog(null, GBGlobals.input_2);
        if(GBGlobals.input_2.equals("Adidas"))
        {
            try{
                String sql = "SELECT * from clck_shoes Where name = 'Adidas'";
                pst = cnn.prepareStatement(sql);
                rs = pst.executeQuery();
                Table1.setModel(DbUtils.resultSetToTableModel(rs));
            } catch (Exception e){
                JOptionPane.showMessageDialog(null,e);
            }

        }
        else if(GBGlobals.input_2.equals("Nike"))
        {
            try{
                String sql = "SELECT * from clck_shoes Where name = 'Nike'";
                pst = cnn.prepareStatement(sql);
                rs = pst.executeQuery();
                Table1.setModel(DbUtils.resultSetToTableModel(rs));
            } catch (Exception e){
                JOptionPane.showMessageDialog(null,e);
            }
        }
        else if(GBGlobals.input_2.equals("Under Armor"))
        {
            try{
                String sql = "SELECT * from clck_shoes Where name = 'Under Armor'";
                pst = cnn.prepareStatement(sql);
                rs = pst.executeQuery();
                Table1.setModel(DbUtils.resultSetToTableModel(rs));
            } catch (Exception e){
                JOptionPane.showMessageDialog(null,e);
            }
        }
        else if(GBGlobals.input_2.equals("Asic"))
        {
            try{
                String sql = "SELECT * from clck_shoes Where name = 'Asic'";
                pst = cnn.prepareStatement(sql);
                rs = pst.executeQuery();
                Table1.setModel(DbUtils.resultSetToTableModel(rs));
            } catch (Exception e){
                JOptionPane.showMessageDialog(null,e);
            }
        }
        else if(GBGlobals.input_2.equals("Vans"))
        {
            try{
                String sql = "SELECT * from clck_shoes Where name = 'Vans'";
                pst = cnn.prepareStatement(sql);
                rs = pst.executeQuery();
                Table1.setModel(DbUtils.resultSetToTableModel(rs));
            } catch (Exception e){
                JOptionPane.showMessageDialog(null,e);
            }
        }
        else if(GBGlobals.input_2.equals("Steve Madden"))
        {
            try{
                String sql = "SELECT * from clck_shoes Where name = 'Steve Madden'";
                pst = cnn.prepareStatement(sql);
                rs = pst.executeQuery();
                Table1.setModel(DbUtils.resultSetToTableModel(rs));
            } catch (Exception e){
                JOptionPane.showMessageDialog(null,e);
            }
        }
        else if(GBGlobals.input_2.equals("Gucci"))
        {
            try{
                String sql = "SELECT * from clck_shoes Where name = 'Gucci'";
                pst = cnn.prepareStatement(sql);
                rs = pst.executeQuery();
                Table1.setModel(DbUtils.resultSetToTableModel(rs));
            } catch (Exception e){
                JOptionPane.showMessageDialog(null,e);
            }
        }

        //  viewBoxActionPerformed(java.awt.event.ActionEvent evt);
    }//GEN-LAST:event_SubmitActionPerformed

    private void Box1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Box1ActionPerformed
        // TODO add your handling code here:
        //GBUtil.loadYear(Box1);
        // GBGlobals.input_2 = Box1.getSelectedItem().toString();
    }//GEN-LAST:event_Box1ActionPerformed

    private void viewBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBoxActionPerformed
        //GBUtil.clearBox(Box1);
        GBGlobals.input_1 = viewBox.getSelectedItem().toString();
        GBGlobals.input_3 = viewBox.getSelectedItem().toString();
        //GBUtil.loadShoes(Box1);
        if(GBGlobals.input_1.equals("Shoes")){
            GBUtil.loadShoes(Box1);
            //GBUtil.loadShoes3(Box1);
        }
        else if(GBGlobals.input_1.equals("Employees")) {
            GBUtil.loadEmployees(Box1);
        }
        else if(GBGlobals.input_1.equals("Sales")) {
            GBUtil.loadYear(Box1);
        }

    }//GEN-LAST:event_viewBoxActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        GBGlobals.input_3 = viewBox.getSelectedItem().toString();
        if(GBGlobals.input_3.equals("Employees")){
            //call new Jpane with employeeSearch window
            EmployeeSearchPane search = new EmployeeSearchPane();
            search.setVisible(true);
        }
        else if(GBGlobals.input_3.equals("Shoes")){
            ///call new Jpane with shoe search window
            ShoeSearchPane search = new ShoeSearchPane();
            search.setVisible(true);
        }
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        
        
        DefaultPieDataset pieDataset = new DefaultPieDataset();
        

        Calendar cal = Calendar.getInstance();
        int year = cal.get(cal.YEAR);
        int month = cal.get(cal.MONTH)+1;
        String x = String.valueOf(year);
        String y = String.valueOf(month);
        try{
       
        Document document = new Document();
        PdfWriter.getInstance(document, new FileOutputStream("QuarterlyReport.pdf"));
        
        document.open();
        Image img = Image.getInstance("logo.png");
        
        document.add(img);
        document.add(new Paragraph("GE SHOE SUPPLY CO. Administrative Quarterly Report ",FontFactory.getFont(FontFactory.TIMES_BOLDITALIC,18,Font.BOLD,BaseColor.RED)));
        document.add(new Paragraph("----------------------------------------------------------------------------------------------------------------------"));
        document.add(new Paragraph("DATE:",FontFactory.getFont(FontFactory.TIMES_ITALIC)));
        document.add(new Paragraph(new java.util.Date().toString()));
        document.add(new Paragraph("----------------------------------------------------------------------------------------------------------------------"));
        
        
      
        //document.add(pdfTable);
        document.add(new Paragraph("----------------------------------------------------------------------------------------------------------------------"));
        Statement stmt = cnn.createStatement();
        Statement stt = cnn.createStatement();
        Statement st = cnn.createStatement();
        //Define the SQL query
        ResultSet rs = stmt.executeQuery("SELECT e.EmployeeID,e.Fname,s2.*,p.Pdate,c.quantity FROM clck_employee e, clck_purchaseorder p, clck_contains c, clck_sale s, clck_shoes s2 WHERE s2.ShoeID = c.S_id and "
                + "c.P_id = p.PurchaseOrderID and e.EmployeeID = s.EmployeeID "
                + "and s.PurchaseorderID = p.PurchaseOrderID and "
                + "p.Pdate >= TO_DATE('"+y+ "/"+"01"+"/"+x+"','mm/dd/yyyy') and "
                + "p.Pdate <= TO_DATE('" +y+ "/"+"28"+"/"+x+"','mm/dd/yyyy')");
        
      
        
         PdfPTable pdfTable = new PdfPTable(10);
        PdfPCell cell;
        PdfPCell table_cell;
        pdfTable.setWidthPercentage(110);
            pdfTable.addCell("EmployeeID");
            pdfTable.addCell("E.Fname");
            pdfTable.addCell("ShoeID");
            pdfTable.addCell("Price");
            pdfTable.addCell("Name");
            pdfTable.addCell("Size");
            pdfTable.addCell("Gender");
            pdfTable.addCell("Model");
            pdfTable.addCell("PDate");
            pdfTable.addCell("Quantity");
           
            
            PdfPTable table1 = new PdfPTable(3);
            table1.addCell("FName");
            table1.addCell("EmployeeID");
            table1.addCell("Average Sale price");
       
        while(rs.next()){
            String emp_id = rs.getString("EmployeeID");
            table_cell = new PdfPCell(new Phrase(emp_id));
            pdfTable.addCell(table_cell);
            String fname = rs.getString("Fname");
            table_cell = new PdfPCell(new Phrase(fname));
            pdfTable.addCell(table_cell);
            String s_ID = rs.getString("ShoeID");
            table_cell = new PdfPCell(new Phrase(s_ID));
            pdfTable.addCell(table_cell);
            String Price = rs.getString("Price");
            table_cell = new PdfPCell(new Phrase(Price));
            pdfTable.addCell(table_cell);
            String name = rs.getString("Name");
            table_cell = new PdfPCell(new Phrase(name));
            pdfTable.addCell(table_cell);
            String s_size = rs.getString("s_size");
            table_cell = new PdfPCell(new Phrase(s_size));
            pdfTable.addCell(table_cell);
            String gender = rs.getString("Gender");
            table_cell = new PdfPCell(new Phrase(gender));
            pdfTable.addCell(table_cell);
            String model = rs.getString("Model");
            table_cell = new PdfPCell(new Phrase(model));
            pdfTable.addCell(table_cell);
            String date = rs.getString("PDate");
            table_cell = new PdfPCell(new Phrase(date));
            pdfTable.addCell(table_cell);
            String qty = rs.getString("Quantity");
            table_cell = new PdfPCell(new Phrase(qty));
            pdfTable.addCell(table_cell);
        }
          ResultSet view = stt.executeQuery("Select Fname, EmployeeID,ROUND(AVG(price),0) FROM v_salesInfo GROUP BY Fname,EmployeeID");
         while(view.next()){
            String fname = view.getString("Fname");
            cell = new PdfPCell(new Phrase(fname));
            table1.addCell(cell);
            String e_id = view.getString("EmployeeID");
            cell = new PdfPCell(new Phrase(e_id));
            table1.addCell(cell);
            String price= view.getString("ROUND(AVG(price),0)");
            cell = new PdfPCell(new Phrase(price));
            table1.addCell(cell);
            
        }
         
          ResultSet ne = st.executeQuery("SELECT name, ROUND(AVG(price),0) from v_salesInfo GROUP BY name");
         while(ne.next()){
            String xd = ne.getString("name");
            String nae =  ne.getString("ROUND(AVG(price),0)");
            int nae1 = Integer.parseInt(nae);
            pieDataset.setValue(xd, new Integer(nae1));

            
        }
        JFreeChart chart = ChartFactory.createPieChart3D("Pie Chart", pieDataset, true,true,true);
        PiePlot3D P=(PiePlot3D)chart.getPlot();
        //P.setForegroundAlpha(TOP_ALIGNMENT);
        ChartFrame frame = new ChartFrame("Pie Chart",chart);
       // frame.setVisible(true);
        frame.setSize(450,500);
        
        
        try{
            final ChartRenderingInfo info = new ChartRenderingInfo(new StandardEntityCollection());
            final File fileimg = new File("PieChart.png");
            ChartUtilities.saveChartAsPNG(fileimg, chart, 600,400,info);
            
        } catch(Exception e){
            
        }
        
        document.add(pdfTable); 
        document.add(new Paragraph("---------------------------------------------------------------------------------------------------------------------------------"));
        document.add(new Paragraph("\n"));
        document.add(new Paragraph("\n"));
        document.add(new Paragraph("\n"));
        document.add(new Paragraph("Employee sales averages"));
        document.add(new Paragraph("\n"));
        document.add(new Paragraph("---------------------------------------------------------------------------------------------------------------------------------"));


        document.add(table1);
        document.add(new Paragraph("---------------------------------------------------------------------------------------------------------------------------------"));
        document.add(new Paragraph("\n"));
        document.add(new Paragraph("\n"));
        document.add(new Paragraph("Monthly Shoe Brand Sales Pie Chart Report"));

        Image img1 = Image.getInstance("PieChart.png");
        document.add(img1);
        JOptionPane.showMessageDialog(null, "Report Printed!");
        document.close();
        
        } catch(Exception z) {
            JOptionPane.showMessageDialog(null, z);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        ShoeLoader shoe= new ShoeLoader();
        shoe.setVisible(true);
    }//GEN-LAST:event_jButton5ActionPerformed

    
     private void populate_EmployeeID() {
        String sql = "Select EmployeeID from clck_Employee WHERE EmployeeID = (select Max(EmployeeID) from clck_employee)";
        try{
        pst = cnn.prepareStatement(sql);
        rs = pst.executeQuery();
        if(rs.next()){
        String y = rs.getString("EmployeeID");
        int result = Integer.parseInt(y);
        int result2 = result+1;
        String result3 = Integer.toString(result2);
        GBGlobals.result = result3;
       // CustomerID.setText(result3);
        }
        } catch(Exception e){
            JOptionPane.showMessageDialog(null,e);
        }
    }
  
          private void populate_ShoeID() {
        String sql = "Select ShoeID from clck_shoes WHERE shoeID = (select Max(ShoeID) from clck_shoes)";
        try{
        pst = cnn.prepareStatement(sql);
        rs = pst.executeQuery();
        if(rs.next()){
        String y = rs.getString("ShoeID");
        int result = Integer.parseInt(y);
        int result2 = result+1;
        String result3 = Integer.toString(result2);
        GBGlobals.result = result3;
       // CustomerID.setText(result3);
        }
        } catch(Exception e){
            JOptionPane.showMessageDialog(null,e);
        }
    }
   
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Logins_s.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Logins_s.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Logins_s.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Logins_s.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Logins_s().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> Box1;
    private javax.swing.JButton Submit;
    private javax.swing.JTable Table1;
    private javax.swing.JButton addNew;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JComboBox<String> viewBox;
    // End of variables declaration//GEN-END:variables
   


}
